name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4
      - name: Get version
        run: echo "PACKAGE_VERSION=$(cargo pkgid | cut -d@ -f2)" >> $GITHUB_ENV
      - name: Create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `v${process.env.PACKAGE_VERSION}`,
              draft: true,
              prerelease: false,
              generate_release_notes: true
            })
            return data.id

  release:
    name: Release - ${{ matrix.platform.os }}
    runs-on: ${{ matrix.platform.os }}
    needs: [create-release]
    strategy:
      matrix:
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: dfrun
            archive_name: dfrun-linux-x86_64.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: dfrun
            archive_name: dfrun-macos-x86_64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: dfrun.exe
            archive_name: dfrun-windows-x86_64.zip

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.platform.target }}

      - name: Package Binary
        shell: bash
        run: |
          cd target/${{ matrix.platform.target }}/release
          if [ "${{ matrix.platform.os }}" = "windows-latest" ]; then
            7z a ../../../${{ matrix.platform.archive_name }} ${{ matrix.platform.binary_name }}
          else
            tar -czf ../../../${{ matrix.platform.archive_name }} ${{ matrix.platform.binary_name }}
          fi
          cd -

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.archive_name }}
          path: ${{ matrix.platform.archive_name }}

      - name: Update Release
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release-id }},
              name: '${{ matrix.platform.archive_name }}',
              data: await fs.promises.readFile('${{ matrix.platform.archive_name }}')
            })

  publish-release:
    runs-on: ubuntu-latest
    needs: [create-release, release]

    steps:
      - name: Publish release
        uses: actions/github-script@v6
        env:
          releaseId: ${{ needs.create-release.outputs.release-id }}
        with:
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.releaseId,
              draft: false,
              prerelease: false
            })
